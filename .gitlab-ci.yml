# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
default:
  image: php:8.3-apache
  services:
    - mysql:8.0

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/

stages: # List of stages for jobs, and their order of execution
  - test
  - deploy

variables:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_DATABASE: screen_suggest
  MYSQL_USER: root
  DATABASE_URL: mysql://root@127:0:0:1:3306/screen_suggest

before_script:
  - bash ci/docker_install.sh > /dev/null
  - wget https://composer.github.io/installer.sig -O - -q | tr -d '\n' > installer.sig
  - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
  - php -r "if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
  - php composer-setup.php
  - php -r "unlink('composer-setup.php'); unlink('installer.sig');"
  - php composer.phar install

unit-test-job: # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - cp .env.test .env
    - bin/console doctrine:schema:create --env=test
    - bin/console doctrine:fixtures:load --env=test --group=content --no-interaction
    - ./vendor/bin/pest


#deploy-job:      # This job runs in the deploy stage.
#  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#  environment: production
#  script:
#    - echo "Deploying application..."
#    - echo "Application successfully deployed."
